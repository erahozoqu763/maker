// =============== SafeChain PowerMine (Frontend-only) ===============
// –ü—Ä–∞—Ü—é—î —Å—É—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ, –≤—Å–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ localStorage.
// HTML –æ—á—ñ–∫—É—î ids: speed, mined, balance, boost, charge, fanImg (—Ç–∞ –æ–ø—Ü. upgrade).

// ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä–∏ ----
const BASE_RATE = 1e-10;            // SC/—Å–µ–∫ –±–µ–∑ –∑–∞—Ä—è–¥–∫–∏ (–ø–æ–≤—ñ–ª—å–Ω–µ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è)
const BOOST_FACTOR = 100;            // –º–Ω–æ–∂–Ω–∏–∫ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –ø—ñ–¥ —á–∞—Å –∑–∞—Ä—è–¥–∫–∏
const CHARGE_COST = 50;              // SC –∑–∞ –æ–¥–Ω—É –∑–∞—Ä—è–¥–∫—É
const CHARGE_DURATION = 300;         // —Å–µ–∫ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∑–∞—Ä—è–¥–∫–∏ (5 —Ö–≤)
const UPGRADE_BASE_COST = 200;       // –±–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞ –∞–ø–≥—Ä–µ–π–¥—É (—è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à –∫–Ω–æ–ø–∫—É upgrade)
const UPGRADE_COST_MULT = 2;         // –º–Ω–æ–∂–Ω–∏–∫ —Ü—ñ–Ω–∏ –∞–ø–≥—Ä–µ–π–¥—É (200, 400, 800, ...)
const MIN_SPIN_SEC = 0.6;            // –Ω–∞–π—à–≤–∏–¥—à–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∫—É–ª–µ—Ä–∞ (—Å–µ–∫ –∑–∞ –æ–±–µ—Ä—Ç)
const MAX_SPIN_SEC = 12;             // –Ω–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∫—É–ª–µ—Ä–∞ (—Å–µ–∫ –∑–∞ –æ–±–µ—Ä—Ç)

// ---- –ï–ª–µ–º–µ–Ω—Ç–∏ DOM ----
const el = {
    speed: document.getElementById("speed"),
    mined: document.getElementById("mined"),
    balance: document.getElementById("balance"),
    boost: document.getElementById("boost"),
    chargeBtn: document.getElementById("charge"),
    upgradeBtn: document.getElementById("upgrade"), // –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—è ‚Äî –æ–∫
    fan: document.getElementById("fanImg")
};

// ---- –°—Ç–∞–Ω (localStorage) ----
let state = loadState();
let tickTimer = null;

// ---- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ----
resumeOfflineProgress();
render();
ensureSpinState();
attachHandlers();
startTicker();

// ================== –§–£–ù–ö–¶–Ü–á ==================

// –ë–∞–∑–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∞–ø–≥—Ä–µ–π–¥—É
function baseRate() {
    return BASE_RATE * state.upgradeLevel;
}

// –ï—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å (–∑ –±—É—Å—Ç–æ–º –∞–±–æ –±–µ–∑)
function effectiveRate(isBoost) {
    return baseRate() * (isBoost ? BOOST_FACTOR : 1);
}

// –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∑–∞ —á–∞—Å, –ø–æ–∫–∏ –≤–∫–ª–∞–¥–∫–∞ –±—É–ª–∞ –∑–∞–∫—Ä–∏—Ç–∞
function resumeOfflineProgress() {
    const now = nowSec();
    const last = state.lastTs || now;
    let elapsed = Math.max(0, Math.floor(now - last));
    if (!elapsed) return (state.lastTs = now, saveState());

    // –°–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —â–µ –±—É–ª–æ –±—É—Å—Ç—É –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∏—Ö–æ–¥—É
    const boostLeft = Math.max(0, state.chargeLeft);
    const boostUsed = Math.min(boostLeft, elapsed);
    const idleUsed = elapsed - boostUsed;

    // –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ SC –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±—É—Å—Ç—É —Ç–∞ –±–µ–∑
    const minedBoost = effectiveRate(true) * boostUsed;
    const minedIdle = effectiveRate(false) * idleUsed;
    const minedTotal = minedBoost + minedIdle;

    state.balance += minedTotal;
    state.minedTotal += minedTotal;
    state.chargeLeft = Math.max(0, state.chargeLeft - elapsed);
    state.lastTs = now;
    saveState();
}

// –ì–æ–ª–æ–≤–Ω–∏–π —Ç—ñ–∫–µ—Ä (—â–æ—Å–µ–∫—É–Ω–¥–∏)
function startTicker() {
    if (tickTimer) clearInterval(tickTimer);
    tickTimer = setInterval(() => {
        const now = nowSec();
        const elapsed = 1;
        state.lastTs = now;

        const onBoost = state.chargeLeft > 0;
        const rate = effectiveRate(onBoost);
        state.balance += rate * elapsed;
        state.minedTotal += rate * elapsed;
        if (onBoost) state.chargeLeft = Math.max(0, state.chargeLeft - elapsed);

        saveState();
        render();
        ensureSpinState();
    }, 1000);
}

// –°—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –∫—É–ª–µ—Ä–∞ —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
function ensureSpinState() {
    const onBoost = state.chargeLeft > 0;
    const rate = effectiveRate(onBoost);

    // –ú–∞–ø–∏–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å ‚Üí –ø–µ—Ä—ñ–æ–¥ –æ–±–µ—Ä—Ç—É (—Å–µ–∫/–æ–±–µ—Ä—Ç)
    const secPerTurn = mapRateToSpin(rate);
    el.fan.style.animationDuration = `${secPerTurn}s`;
    el.fan.style.animationPlayState = rate > 0 ? "running" : "paused";
}

function mapRateToSpin(rate) {
    // –õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–µ –º–∞–ø—É–≤–∞–Ω–Ω—è, —â–æ–± –≤—ñ–∑—É–∞–ª—å–Ω–æ –≤—ñ–¥—á—É–≤–∞–ª–∞—Å—å —Ä—ñ–∑–Ω–∏—Ü—è
    // –ü—Ä–∏ –¥—É–∂–µ –º–∞–ª—ñ–π —à–≤–∏–¥–∫–æ—Å—Ç—ñ ‚Äî –ø–æ–≤—ñ–ª—å–Ω–æ (MAX_SPIN_SEC), –ø—Ä–∏ –≤–µ–ª–∏–∫—ñ–π ‚Äî —à–≤–∏–¥–∫–æ (MIN_SPIN_SEC).
    // –ù–æ—Ä–º—É—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ BASE_RATE.
    const k = Math.max(1e-12, rate / BASE_RATE);    // —É–Ω–∏–∫–Ω—É—Ç–∏ 0/–ø–æ–¥—ñ–ª—É
    // log —à–∫–∞–ª–∞
    const t = clamp(Math.log10(k) / Math.log10(BOOST_FACTOR * 10), 0, 1);
    // —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è
    return lerp(MAX_SPIN_SEC, MIN_SPIN_SEC, t);
}

function lerp(a, b, t) { return a + (b - a) * t; }
function clamp(x, a, b) { return Math.max(a, Math.min(b, x)); }

// –ó–∞—Ä—è–¥–∫–∞ –º–∞–π–Ω–µ—Ä–∞ –∑–∞ SC
function chargeMiner() {
    if (state.balance < CHARGE_COST) {
        toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SC –¥–ª—è –∑–∞—Ä—è–¥–∫–∏.");
        return;
    }
    state.balance -= CHARGE_COST;
    state.chargeLeft += CHARGE_DURATION;
    state.lastTs = nowSec();
    saveState();
    render();
    ensureSpinState();
    toast(`–ó–∞—Ä—è–¥–∂–µ–Ω–æ –Ω–∞ ${CHARGE_DURATION / 60} —Ö–≤. üöÄ`);
}

// –û–ø—Ü—ñ–π–Ω–∏–π –∞–ø–≥—Ä–µ–π–¥ –±–∞–∑–æ–≤–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ (–ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω–∏–π)
function upgradeMiner() {
    const price = currentUpgradeCost();
    if (state.balance < price) {
        toast("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SC –¥–ª—è –∞–ø–≥—Ä–µ–π–¥—É.");
        return;
    }
    state.balance -= price;
    state.upgradeLevel += 1;
    saveState();
    render();
    ensureSpinState();
    toast(`–®–≤–∏–¥–∫—ñ—Å—Ç—å –ø—ñ–¥–≤–∏—â–µ–Ω–æ! –†—ñ–≤–µ–Ω—å: x${state.upgradeLevel}`);
}

// –†–µ–Ω–¥–µ—Ä —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
function render() {
    const onBoost = state.chargeLeft > 0;
    const rate = effectiveRate(onBoost);

    el.speed.textContent = formatNum(rate, 12);
    el.mined.textContent = formatNum(state.minedTotal, 9);
    el.balance.textContent = formatNum(state.balance, 9);
    el.boost.textContent = onBoost ? `x${BOOST_FACTOR}` : "x1";

    // –°—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫
    el.chargeBtn.disabled = state.balance < CHARGE_COST;
    if (el.upgradeBtn) {
        const price = currentUpgradeCost();
        el.upgradeBtn.disabled = state.balance < price;
        el.upgradeBtn.textContent = `‚ö° –ü—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ (—Ü—ñ–Ω–∞ ${formatNum(price, 2)} SC)`;
    }
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function attachHandlers() {
    el.chargeBtn?.addEventListener("click", chargeMiner);
    if (el.upgradeBtn) el.upgradeBtn.addEventListener("click", upgradeMiner);
}

// –°—Ö–æ–≤–∏—â–µ
function loadState() {
    const s = JSON.parse(localStorage.getItem("sc_powermine") || "{}");
    return {
        balance: typeof s.balance === "number" ? s.balance : 0,
        minedTotal: typeof s.minedTotal === "number" ? s.minedTotal : 0,
        chargeLeft: typeof s.chargeLeft === "number" ? s.chargeLeft : 0,
        upgradeLevel: Number.isInteger(s.upgradeLevel) ? Math.max(1, s.upgradeLevel) : 1,
        lastTs: typeof s.lastTs === "number" ? s.lastTs : 0
    };
}
function saveState() {
    localStorage.setItem("sc_powermine", JSON.stringify(state));
}

// –£—Ç–∏–ª—ñ—Ç–∏
function nowSec() { return Math.floor(Date.now() / 1000); }
function formatNum(n, digits = 6) { return Number(n).toFixed(digits); }

let toastTimer = null;
function toast(msg) {
    // –ø—Ä–æ—Å—Ç–∏–π –Ω–æ–Ω-–±–ª–æ–∫—ñ–Ω–≥ ¬´–∞–ª–æ¬ª —á–µ—Ä–µ–∑ alert –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ console+optional
    console.log(msg);
    // –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ DOM-—Ç–æ—Å—Ç. –ó–∞—Ä–∞–∑ –±–µ–∑ DOM-–µ–ª–µ–º–µ–Ω—Ç–∞, —â–æ–± –Ω–µ –ª—ñ–∑—Ç–∏ –≤ HTML.
}

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Å—Ç–∏–ª—ñ –¥–ª—è —Å–ø—ñ–Ω—É, —è–∫—â–æ –Ω–µ –∑–∞–¥–∞–Ω—ñ –≤ CSS
if (el.fan) {
    // —â–æ–± –º–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∑ JS
    el.fan.style.transformOrigin = "50% 50%";
    el.fan.style.animationName = "spin";
    el.fan.style.animationTimingFunction = "linear";
    el.fan.style.animationIterationCount = "infinite";
    // –±–∞–∑–æ–≤–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å ‚Äî –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
    el.fan.style.animationDuration = `${MAX_SPIN_SEC}s`;
}

// ================================================================
// –Ø–∫—â–æ —Ö–æ—á–µ—à –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –≤—ñ–¥–ª—ñ–∫ –±—É—Å—Ç–∞ ‚Äî –¥–æ–¥–∞–π –µ–ª–µ–º–µ–Ω—Ç —ñ –≤–∏–≤–æ–¥—å state.chargeLeft
// –¢–∞–∫–æ–∂ –ª–µ–≥–∫–æ –¥–æ–¥–∞—Ç–∏ ¬´–∫–≤–µ—Å—Ç–∏¬ª –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è SC: –ø—Ä–æ—Å—Ç–æ –∑–±—ñ–ª—å—à—É–π state.balance.
// ================================================================

// –û–ø—Ü—ñ–π–Ω–æ: –µ–∫—Å–ø–æ—Ä—Ç —É window –¥–ª—è –¥–µ–±–∞–≥–∞
window.PowerMine = {
    get state() { return state; },
    chargeMiner,
    upgradeMiner,
    reset() { localStorage.removeItem("sc_powermine"); state = loadState(); render(); ensureSpinState(); }
};
